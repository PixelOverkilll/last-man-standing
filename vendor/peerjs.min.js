/* Minimaler PeerJS-Stub für lokale Entwicklung (Platzhalter)
   Dieser Stub stellt ein minimales `Peer`-Konstrukt bereit, damit die Anwendung
   nicht sofort beim Laden wegen fehlendem PeerJS abstürzt. Für produktive
   Nutzung bitte die echte peerjs-Bibliothek in /vendor/peerjs.min.js ablegen.
*/
(function(global){
  'use strict';
  if (!global) return;
  if (global.Peer) return; // bereits vorhanden

  function PeerStub(id, options) {
    this.id = id || null;
    this.options = options || {};
    // Hinweis für Entwickler
    if (global.console && global.console.warn) {
      global.console.warn('PeerJS stub: echte PeerJS nicht geladen. Verwende für Tests oder lege die echte Bibliothek in vendor/peerjs.min.js ab.');
    }
    this._events = {};
  }

  PeerStub.prototype.on = function(evt, cb) {
    this._events[evt] = this._events[evt] || [];
    this._events[evt].push(cb);
  };

  PeerStub.prototype.emit = function(evt) {
    var args = Array.prototype.slice.call(arguments, 1);
    var handlers = this._events[evt] || [];
    for (var i = 0; i < handlers.length; i++) {
      try { handlers[i].apply(null, args); } catch (e) { if (global.console && global.console.error) { global.console.error(e); } }
    }
  };

  PeerStub.prototype.connect = function(peerId) {
    var self = this;
    // Simuliere asynchrone Verbindung und löse 'connection' Event aus
    setTimeout(function(){ self.emit('connection', { peer: peerId, stub: true }); }, 0);
    return {
      send: function() { if (global.console && global.console.warn) global.console.warn('PeerJS stub: send called'); },
      on: function(){}
    };
  };

  PeerStub.prototype.destroy = function(){ if (global.console && global.console.warn) global.console.warn('PeerJS stub: destroy called'); };

  // Export
  global.Peer = PeerStub;
})(typeof window !== 'undefined' ? window : {});
