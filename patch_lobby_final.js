const fs = require('fs');
const path = require('path');
const filePath = path.resolve(__dirname, 'js', 'app.js');
const backupPath = filePath + '.autopatch.final.bak';
console.log('file:', filePath);
let s = fs.readFileSync(filePath, 'utf8');
fs.writeFileSync(backupPath, s, 'utf8');
console.log('Backup written to', backupPath);
const start = '// Create Lobby Button';
const end = '// Generate random lobby code';
const si = s.lastIndexOf(start);
if (si === -1) { console.error('Start marker not found'); process.exit(2); }
const ei = s.indexOf(end, si);
if (ei === -1) { console.error('End marker not found after start'); process.exit(3); }
const before = s.slice(0, si);
const after = s.slice(ei);
const newBlock = `\n  // Create Lobby Button\n  createLobbyBtn.addEventListener('click', async function() {\n    // WICHTIG: Pr√ºfe ob User eingeloggt ist\n    const storedUser = localStorage.getItem('discordUser');\n\n    if (!storedUser) {\n      console.error('‚ùå Kein Discord User gefunden! Bitte melde dich zuerst an.');\n      alert('Bitte melde dich zuerst mit Discord an!');\n      return;\n    }\n\n    // Admin-Passwort abfragen\n    const adminPassword = prompt('üîê Admin-Passwort eingeben um Lobby zu erstellen:');\n    if (adminPassword !== 'PXL339') {\n      alert('‚ùå Falsches Passwort! Lobby kann nicht erstellt werden.');\n      console.error('‚ùå Falsches Admin-Passwort');\n      return;\n    }\n\n    const userData = JSON.parse(storedUser);\n    const localLobbyCode = generateLobbyCode();\n\n    // Zeige Code sofort im Eingabefeld\n    lobbyCodeInput.value = localLobbyCode;\n    updateJoinButtonState();\n\n    const socket = window.__LMS_SOCKET;\n    if (socket && socket.connected) {\n      try {\n        socket.emit('create-lobby', { lobbyId: localLobbyCode, host: { id: userData.id, username: userData.username } }, (res) => {\n          console.log('[app] create-lobby ack', res);\n          if (res && (res.ok === true || res.lobbyId)) {\n            const finalCode = res.lobbyId || localLobbyCode;\n            try { localStorage.setItem('lobbyCode', finalCode); localStorage.setItem('isHost', 'true'); } catch(e){}\n            lobbyCodeInput.value = finalCode;\n            window.location.href = 'lobby.html?code=' + encodeURIComponent(finalCode);\n          } else {\n            alert('Erstellen der Lobby fehlgeschlagen: ' + (res && res.error ? res.error : 'Unbekannter Fehler'));\n            console.error('[app] create-lobby failed', res);\n          }\n        });\n      } catch (err) {\n        console.error('[app] Fehler beim Senden von create-lobby √ºber Socket:', err);\n        try { localStorage.setItem('lobbyCode', localLobbyCode); localStorage.setItem('isHost', 'true'); } catch(e){}\n        window.location.href = 'lobby.html?code=' + encodeURIComponent(localLobbyCode);\n      }\n    } else {\n      console.warn('[app] kein Socket verf√ºgbar, verwende Fallback f√ºr Lobby-Erstellung');\n      try { localStorage.setItem('lobbyCode', localLobbyCode); localStorage.setItem('isHost', 'true'); } catch(e){}\n      window.location.href = 'lobby.html?code=' + encodeURIComponent(localLobbyCode);\n    }\n  });\n\n  // Join Lobby Button\n  joinLobbyBtn.addEventListener('click', function() {\n    if (!isLobbyCodeValid()) return;\n\n    const storedUser = localStorage.getItem('discordUser');\n    if (!storedUser) {\n      console.error('‚ùå Kein Discord User gefunden! Bitte melde dich zuerst an.');\n      alert('Bitte melde dich zuerst mit Discord an!');\n      return;\n    }\n\n    const userData = JSON.parse(storedUser);\n    const code = lobbyCodeInput.value.trim();\n\n    const socket = window.__LMS_SOCKET;\n    if (socket && socket.connected) {\n      try {\n        socket.emit('join-lobby', { lobbyId: code, player: { id: userData.id, username: userData.username } }, (res) => {\n          console.log('[app] join-lobby ack', res);\n          if (res && res.ok) {\n            try { localStorage.setItem('lobbyCode', code); localStorage.setItem('isHost', 'false'); } catch(e){}\n            window.location.href = 'lobby.html?code=' + encodeURIComponent(code);\n          } else {\n            alert('Beitreten der Lobby fehlgeschlagen: ' + (res && res.error ? res.error : 'Lobby nicht gefunden oder geschlossen'));\n            console.error('[app] join-lobby failed', res);\n          }\n        });\n      } catch (err) {\n        console.error('[app] Fehler beim Senden von join-lobby √ºber Socket:', err);\n        try { localStorage.setItem('lobbyCode', code); localStorage.setItem('isHost', 'false'); } catch(e){}\n        window.location.href = 'lobby.html?code=' + encodeURIComponent(code);\n      }\n    } else {\n      console.warn('[app] kein Socket verf√ºgbar, verwende Fallback f√ºr Lobby-Beitritt');\n      try { localStorage.setItem('lobbyCode', code); localStorage.setItem('isHost', 'false'); } catch(e){}\n      window.location.href = 'lobby.html?code=' + encodeURIComponent(code);\n    }\n  });\n`;

const newContent = before + start + newBlock + after;
fs.writeFileSync(filePath, newContent, 'utf8');
console.log('Patched file written. Backup at', backupPath);

